
.. py:class:: RepresentationViewer(self, width=500, height=500)

    RepresentationViewer is an IPython notebook widget useful to display 3d scenes through webgl.
    
    Example:
    
    .. code::
    
        from IPython.display import display
    
        rv = RepresentationViewer()
        rv.add_representation('point', {'coordinates': coordinates, 'colors': colors, 'sizes': sizes})
        display(rv)
    
    .. py:attribute: width
    
        Width in pixels of the IPython widget
    
    .. py:attribute: height
    
        Height in pixels of the IPython widget
    
    .. py:attribute: camera_str
    
        A string-representation of camera position and orientation
    
    .. py:attribute: static_moving
    
        Set to True to make the camera lose the "bouncy" rotation.
    
    .. py:method:: add_representation(self, rep_type, options)
    
        Add a 3D representation to the viewer.  See User Guide for
        a complete description of the representations available.
        
        :return: An unique hexadecimal identifier for the representation.
        :rtype: str
    
    .. py:method:: remove_representation(self, rep_id)
    
        Remove a representation from the viewer 
        
        :param str rep_id: the unique identifier generated by RepresentationViewer.add_representation
    
    .. py:method:: update_representation(self, rep_id, options)
    
        Update a representation with new data.
        
        :param str rep_id: the unique identifier returned by RepresentationViewer.add_representation
        :param dict options: dictionary containing the updated data.

.. py:class:: TrajectoryControls(self, n_frames, fps=30)

    Play/Pause controls useful for playing trajectories.
    
    Example:
    
    You can connect a callback to be executed every time the frame changes.
    
    .. code::
    
        from IPython.display import display
    
        controls = TrajectoryControls(10) # 10 frames
        
        def callback(frame):
            print("Current frame %d" % frame)
    
        controls.on_frame_change(callback)
        display(controls)
    
    .. py:attribute:: frame
    
        Current frame
    
    .. py:attribute:: n_frames
    
        Total number of frames
    
    .. py:attribute:: fps
    
        Frames per second (defaults to 30)
    
    .. py:method:: on_frame_change(self, callback)
    
        Connect a callback to be executed every time the frame attribute changes.
